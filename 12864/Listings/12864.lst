C51 COMPILER V9.54   12864                                                                 04/28/2025 20:50:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE 12864
OBJECT MODULE PLACED IN .\Objects\12864.obj
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE 12864.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\12864.
                    -lst) TABS(2) OBJECT(.\Objects\12864.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          
   4          #define uchar unsigned char
   5          #define uint unsigned int
   6          #define DR(fre) (65536-(11059200/12)/(2*fre))  // 频率换定时器值
   7          
   8          // 硬件接口定义
   9          sbit RS = P1^2;
  10          sbit RW = P1^1;
  11          sbit E  = P1^0;
  12          sbit RESET = P1^3;
  13          sbit PSB = P3^5;
  14          sbit beep = P3^6;  // 蜂鸣器
  15          
  16          #define LCD_DATA P2
  17          #define KeyPort  P0
  18          
  19          // 音符频率表
  20          uint code music[16] = {
  21            DR(262),DR(294),DR(330),DR(349),
  22            DR(392),DR(440),DR(494),DR(523),
  23            DR(587),DR(659),DR(698),DR(784),
  24            DR(880),DR(988),DR(1046),0
  25          };
  26          
  27          // 全局变量
  28          uchar key = 0xff;
  29          uchar pre_key = 0xff;
  30          
  31          // 延时
  32          void delay(uint ms)
  33          {
  34   1        uint i;
  35   1        for(i=0; i<ms; i++)
  36   1        {
  37   2          TH1 = (65536-1000)>>8;
  38   2          TL1 = (65536-1000)&0xff;
  39   2          TR1 = 1;
  40   2          while(!TF1);
  41   2          TR1 = 0;
  42   2          TF1 = 0;
  43   2        }
  44   1      }
  45          
  46          // 检查LCD是否忙
  47          bit check_busy()
  48          {
  49   1        uint timeout = 5000;
  50   1        LCD_DATA = 0xFF;
  51   1        RS = 0;
  52   1        RW = 1;
  53   1        E = 1;
  54   1        while ((LCD_DATA & 0x80) && timeout--);
C51 COMPILER V9.54   12864                                                                 04/28/2025 20:50:25 PAGE 2   

  55   1        E = 0;
  56   1        return (timeout > 0) ? 0 : 1;
  57   1      }
  58          
  59          // LCD写命令
  60          void write_cmd(uchar cmd)
  61          {
  62   1        if (!check_busy())
  63   1        {
  64   2          RS = 0;
  65   2          RW = 0;
  66   2          LCD_DATA = cmd;
  67   2          E = 1;
  68   2          _nop_(); _nop_();
  69   2          E = 0;
  70   2          delay(5);
  71   2        }
  72   1      }
  73          
  74          // LCD写数据
  75          void write_data(uchar dat)
  76          {
  77   1        if (!check_busy())
  78   1        {
  79   2          RS = 1;
  80   2          RW = 0;
  81   2          LCD_DATA = dat;
  82   2          E = 1;
  83   2          _nop_(); _nop_();
  84   2          E = 0;
  85   2          delay(5);
  86   2        }
  87   1      }
  88          
  89          // LCD初始化
  90          void lcd_init()
  91          {
  92   1        PSB = 1;
  93   1        RESET = 0;
  94   1        delay(50);
  95   1        RESET = 1;
  96   1        delay(50);
  97   1      
  98   1        write_cmd(0x30);
  99   1        delay(10);
 100   1        write_cmd(0x0C);
 101   1        delay(10);
 102   1        write_cmd(0x01);
 103   1        delay(20);
 104   1        write_cmd(0x06);
 105   1        delay(10);
 106   1      }
 107          
 108          // 显示字符串
 109          void display_string(uchar x, uchar y, char *str)
 110          {
 111   1        write_cmd(0x80 | (y << 6) | x);
 112   1        while (*str)
 113   1        {
 114   2          write_data(*str++);
 115   2        }
 116   1      }
C51 COMPILER V9.54   12864                                                                 04/28/2025 20:50:25 PAGE 3   

 117          
 118          // 显示数字
 119          void display_number(uchar x, uchar y, uint num)
 120          {
 121   1        uchar buf[5];
 122   1        uchar i = 0;
 123   1        if (num == 0)
 124   1        {
 125   2          buf[0] = '0';
 126   2          i = 1;
 127   2        }
 128   1        else
 129   1        {
 130   2          while (num > 0 && i < 5)
 131   2          {
 132   3            buf[i++] = '0' + (num % 10);
 133   3            num /= 10;
 134   3          }
 135   2        }
 136   1        write_cmd(0x80 | (y << 6) | x);
 137   1        while (i > 0)
 138   1        {
 139   2          write_data(buf[--i]);
 140   2        }
 141   1      }
 142          
 143          // 扫描按键
 144          uchar keyscan()
 145          {
 146   1        uchar i, temp, keynum = 0xff;
 147   1        for(i=0; i<4; i++)
 148   1        {
 149   2          KeyPort = ~(0x01 << i);
 150   2          temp = KeyPort & 0xf0;
 151   2          if(temp != 0xf0)
 152   2          {
 153   3            delay(1);
 154   3            temp = KeyPort & 0xf0;
 155   3            if(temp != 0xf0)
 156   3            {
 157   4              if((temp & 0x10) == 0) keynum = i*4 + 0;
 158   4              else if((temp & 0x20) == 0) keynum = i*4 + 1;
 159   4              else if((temp & 0x40) == 0) keynum = i*4 + 2;
 160   4              else if((temp & 0x80) == 0) keynum = i*4 + 3;
 161   4            }
 162   3          }
 163   2        }
 164   1        return keynum;
 165   1      }
 166          
 167          // Timer0中断：控制蜂鸣器发声（频率）
 168          void timer0() interrupt 1
 169          {
 170   1        TH0 = music[key] >> 8;
 171   1        TL0 = music[key] & 0xff;
 172   1        beep = ~beep;  // 翻转蜂鸣器
 173   1      }
 174          
 175          // 主函数
 176          void main()
 177          {
 178   1        TMOD = 0x11;  // Timer0、Timer1都用方式1
C51 COMPILER V9.54   12864                                                                 04/28/2025 20:50:25 PAGE 4   

 179   1        EA = 1;
 180   1        ET0 = 1;  // 允许Timer0中断
 181   1      
 182   1        lcd_init();
 183   1        display_string(0,0,"0:"); 
 184   1        display_string(2,0,"1:");
 185   1        display_string(4,0,"2:");
 186   1        display_string(6,0,"3:");
 187   1        display_string(8,0,"4:");
 188   1        display_string(10,0,"5:");  
 189   1        display_string(12,0,"6:");
 190   1        display_string(14,0,"7:");
 191   1        display_string(16,0,"8:");
 192   1        display_string(18,0,"9:");
 193   1        display_string(20,0,"10:");
 194   1        display_string(22,0,"11:");
 195   1        display_string(24,0,"12:");
 196   1        display_string(26,0,"13:");
 197   1        display_string(28,0,"14:");
 198   1        display_string(30,0,"15:");
 199   1        while(1)
 200   1        {
 201   2          key = keyscan();
 202   2          if(key != 0xff)
 203   2          {
 204   3            if(key != pre_key)
 205   3            {
 206   4              pre_key = key;
 207   4              lcd_init();
 208   4              display_string(0,0,"key:");
 209   4              write_data('0' + (key/10));
 210   4              write_data('0' + (key%10));
 211   4              
 212   4              display_string(8,0,"Hz:");
 213   4              display_number(11, 0, (uint)((11059200/12) / (2 * (65536 - music[key])))); // 显示频率
 214   4              display_string(4,0,"2:");
 215   4              if (music[key] != 0)
 216   4              {
 217   5                  TH0 = music[key] >> 8;
 218   5                  TL0 = music[key] & 0xff;
 219   5                  TR0 = 1;
 220   5              }
 221   4              else
 222   4              {
 223   5                  TR0 = 0;
 224   5                  beep = 1;
 225   5              }
 226   4            }
 227   3          }
 228   2          else
 229   2          {
 230   3            pre_key = 0xff;
 231   3            TR0 = 0;
 232   3            beep = 1;
 233   3          }
 234   2        }
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    947    ----
   CONSTANT SIZE    =     95    ----
C51 COMPILER V9.54   12864                                                                 04/28/2025 20:50:25 PAGE 5   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
